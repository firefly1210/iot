// Document: IOT Practicals - Full Code Listing

// Practical 1: Logic Gates and Binary Operations
// [This practical is theoretical; code is usually done in simulation tools or digital logic software. Skip to practical 2.]

// Practical 2: Arduino LED Blinking
void setup() {
  pinMode(13, OUTPUT);
}

void loop() {
  digitalWrite(13, HIGH);
  delay(1000);
  digitalWrite(13, LOW);
  delay(1000);
}

// Practical 3: LED Control via Serial Input
int ledPin = 13;

void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  if (Serial.available()) {
    char c = Serial.read();
    if (c == '1') digitalWrite(ledPin, HIGH);
    else if (c == '0') digitalWrite(ledPin, LOW);
  }
}

// Practical 4: Square Number via Input
void setup() {
  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    int num = Serial.parseInt();
    int square = num * num;
    Serial.print("Square of ");
    Serial.print(num);
    Serial.print(" is ");
    Serial.println(square);
  }
}

// Practical 5: RGB LED with Potentiometers
int redPin = 9;
int greenPin = 10;
int bluePin = 11;

int potRed = A0;
int potGreen = A1;
int potBlue = A2;

void setup() {
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
}

void loop() {
  int redValue = analogRead(potRed) / 4;
  int greenValue = analogRead(potGreen) / 4;
  int blueValue = analogRead(potBlue) / 4;

  analogWrite(redPin, redValue);
  analogWrite(greenPin, greenValue);
  analogWrite(bluePin, blueValue);
}

// Practical 6: Temperature Sensor Reading (LM35)
int tempPin = A0;

void setup() {
  Serial.begin(9600);
}

void loop() {
  int reading = analogRead(tempPin);
  float voltage = reading * (5.0 / 1023.0);
  float temperatureC = voltage * 100;
  Serial.print("Temperature: ");
  Serial.print(temperatureC);
  Serial.println(" C");
  delay(1000);
}

// Practical 7: Temperature in Fahrenheit with Min/Max Display
int tempSensor = A0;
float minTemp = 1000;
float maxTemp = -1000;

void setup() {
  Serial.begin(9600);
}

void loop() {
  int reading = analogRead(tempSensor);
  float voltage = reading * (5.0 / 1023.0);
  float temperatureC = voltage * 100;
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32;

  if (temperatureF < minTemp) minTemp = temperatureF;
  if (temperatureF > maxTemp) maxTemp = temperatureF;

  Serial.print("Temperature: ");
  Serial.print(temperatureF);
  Serial.print(" F  Min: ");
  Serial.print(minTemp);
  Serial.print(" F  Max: ");
  Serial.println(maxTemp);
  delay(1000);
}

// Practical 8: IR Sensor Obstacle Detection
int irPin = 2;
int led = 13;

void setup() {
  pinMode(irPin, INPUT);
  pinMode(led, OUTPUT);
}

void loop() {
  int status = digitalRead(irPin);
  if (status == HIGH) digitalWrite(led, HIGH);
  else digitalWrite(led, LOW);
}

// Practical 9: Ultrasonic Distance Measurement
#define trigPin 9
#define echoPin 10

void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

void loop() {
  long duration, distance;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) * 0.0344;
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  delay(1000);
}

// Practical 10: ESP32 with ThingSpeak
#include <WiFi.h>
#include <ThingSpeak.h>

const char *ssid = "your_SSID";
const char *password = "your_PASSWORD";
unsigned long myChannelNumber = 123456;
const char *myWriteAPIKey = "your_API_KEY";

WiFiClient client;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  ThingSpeak.begin(client);
}

void loop() {
  int reading = analogRead(A0);
  float voltage = reading * (5.0 / 1023.0);
  float temperatureC = voltage * 100;
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32;
  ThingSpeak.setField(1, temperatureF);
  int responseCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (responseCode == 200) {
    Serial.println("Data sent successfully");
  } else {
    Serial.println("Error sending data");
  }
  delay(60000);
}
